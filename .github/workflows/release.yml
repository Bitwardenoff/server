---
name: Release

on:
  workflow_dispatch:
    inputs: {}


jobs:
  setup:
    name: Setup
    runs-on: ubuntu-20.04
    outputs:
      release_version: ${{ steps.version.outputs.package }}
      branch-name: ${{ steps.branch.outputs.branch-name }}
    steps:
      - name: Branch check
        run: |
          if [[ "$GITHUB_REF" != "refs/heads/rc" ]] && [[ "$GITHUB_REF" != "refs/heads/hotfix" ]]; then
            echo "==================================="
            echo "[!] Can only release from the 'rc' or 'hotfix' branches"
            echo "==================================="
            exit 1
          fi

      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Check Release Version
        id: version
        run: |
          version=$( grep -o "<Version>.*</Version>" Directory.Build.props | grep -o "[0-9]*\.[0-9]*\.[0-9]*")
          previous_release_tag_version=$(
            curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq -r ".tag_name"
          )

          if [ "v$version" == "$previous_release_tag_version" ]; then
            echo "[!] Already released v$version. Please bump version to continue"
            exit 1
          fi

          echo "::set-output name=package::$version"

      - name: Get branch name
        id: branch
        run: |
          BRANCH_NAME=$(basename ${{ github.ref }})
          echo "::set-output name=branch-name::$BRANCH_NAME"


  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    needs:
      - setup
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Api
          - name: Admin
          - name: Billing
          - name: Events
          - name: Sso
          - name: Identity
    steps:
      - name: Setup
        id: setup
        run: |
          NAME_LOWER=$(echo "${{ matrix.name }}" | awk '{print tolower($0)}')
          echo "Matrix name: ${{ matrix.name }}"
          echo "NAME_LOWER: $NAME_LOWER"
          echo "::set-output name=name_lower::$NAME_LOWER"

      - name: Download latest Release ${{ matrix.name }} asset
        uses: bitwarden/gh-actions/download-artifacts@23433be15ed6fd046ce12b6889c5184a8d9c8783
        with:
          workflow: build.yml
          workflow_conclusion: success
          branch: ${{ needs.setup.outputs.branch-name }}
          artifacts: ${{ matrix.name }}.zip

      - name: Login to Azure
        uses: Azure/login@77f1b2e3fb80c0e8645114159d17008b8a2e475a
        with:
          creds: ${{ secrets.AZURE_PROD_KV_CREDENTIALS }}

      - name: Retrieve secrets
        id: retrieve-secrets
        env:
          VAULT_NAME: "bitwarden-prod-kv"
        run: |
          webapp_name=$(
            az keyvault secret show --vault-name $VAULT_NAME \
              --name appservices-${{ steps.setup.outputs.name_lower }}-webapp-name \
              --query value --output tsv
          )
          publish_profile=$(
            az keyvault secret show --vault-name $VAULT_NAME \
              --name appservices-${{ steps.setup.outputs.name_lower }}-webapp-publish-profile \
              --query value --output tsv
          )
          echo "::add-mask::$webapp_name"
          echo "::set-output name=webapp-name::$webapp_name"
          echo "::add-mask::$publish_profile"
          echo "::set-output name=publish-profile::$publish_profile"

      - name: Deploy App
        uses: azure/webapps-deploy@798e43877120eda6a2a690a4f212c545e586ae31
        with:
          app-name: ${{ steps.retrieve-secrets.outputs.webapp-name }}
          publish-profile: ${{ steps.retrieve-secrets.outputs.publish-profile }}
          package: ./${{ matrix.name }}.zip
          slot-name: "staging"


  release-docker:
    name: Build Docker images
    runs-on: ubuntu-20.04
    needs:
      - setup
    env:
      _RELEASE_VERSION: ${{ needs.setup.outputs.release_version }}
      _BRANCH_NAME: ${{ needs.setup.outputs.branch-name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - service_name: Admin
          - service_name: Api
          - service_name: Attachments
          - service_name: Events
          - service_name: Icons
          - service_name: Identity
          - service_name: K8S-Proxy
          - service_name: MsSql
          - service_name: Nginx
          - service_name: Notifications
          - service_name: Server
          - service_name: Setup
          - service_name: Sso
    steps:
      - name: Print environment
        run: |
          whoami
          docker --version
          echo "GitHub ref: $GITHUB_REF"
          echo "GitHub event: $GITHUB_EVENT"

      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Login to Azure - Prod Subscription
        uses: Azure/login@77f1b2e3fb80c0e8645114159d17008b8a2e475a
        with:
          creds: ${{ secrets.AZURE_PROD_KV_CREDENTIALS }}

      - name: Retrieve secrets
        id: retrieve-secrets
        uses: Azure/get-keyvault-secrets@80ccd3fafe5662407cc2e55f202ee34bfff8c403
        with:
          keyvault: "bitwarden-prod-kv"
          secrets: "aws-ecr-access-key-id,
                    aws-ecr-secret-access-key,
                    docker-username,
                    docker-password,
                    dct-delegate-repo-passphrase,
                    dct-delegate-key"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f  # v1
        with:
          aws-access-key-id: ${{ steps.retrieve-secrets.outputs.aws-ecr-access-key-id }}
          aws-secret-access-key: ${{ steps.retrieve-secrets.outputs.aws-ecr-secret-access-key }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2  # v1

      - name: Setup service name
        id: setup
        run: |
          SERVICE_NAME=$(echo "${{ matrix.service_name }}" | awk '{print tolower($0)}')
          echo "Matrix name: ${{ matrix.service_name }}"
          echo "SERVICE_NAME: $SERVICE_NAME"
          echo "::set-output name=service_name::$SERVICE_NAME"

      - name: Pull latest selfhost image from AWS nonprod repository
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          SERVICE_NAME: ${{ steps.setup.outputs.service_name }}
        run: docker pull $ECR_REGISTRY/nonprod/$SERVICE_NAME:$_BRANCH_NAME-$IMAGE_TAG

      - name: Tag version and latest for AWS prod repository
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          SERVICE_NAME: ${{ steps.setup.outputs.service_name }}
        run: |
          docker tag $ECR_REGISTRY/nonprod/$SERVICE_NAME:$_BRANCH_NAME-$IMAGE_TAG \
            $ECR_REGISTRY/prod/$SERVICE_NAME:$_RELEASE_VERSION
          docker tag $ECR_REGISTRY/nonprod/$SERVICE_NAME:$_BRANCH_NAME-$IMAGE_TAG \
            $ECR_REGISTRY/prod/$SERVICE_NAME:latest

      - name: Push version and latest image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          SERVICE_NAME: ${{ steps.setup.outputs.service_name }}
        run: |
          $ECR_REGISTRY/prod/$SERVICE_NAME:$_RELEASE_VERSION
          $ECR_REGISTRY/prod/$SERVICE_NAME:latest

      - name: Log out of Docker
        run: docker logout

      - name: Log into Docker
        shell: bash
        env:
          DOCKER_USERNAME: ${{ steps.retrieve-secrets.outputs.docker-username }}
          DOCKER_PASSWORD: ${{ steps.retrieve-secrets.outputs.docker-password }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Setup Docker Trust
        shell: bash
        env:
          DCT_DELEGATION_KEY_ID: "c9bde8ec820701516491e5e03d3a6354e7bd66d05fa3df2b0062f68b116dc59c"
          DCT_DELEGATE_KEY: ${{ steps.retrieve-secrets.outputs.dct-delegate-key }}
        run: |
          mkdir -p ~/.docker/trust/private
          echo "$DCT_DELEGATE_KEY" > ~/.docker/trust/private/$DCT_DELEGATION_KEY_ID.key

      - name: Tag version and latest for Docker Hub repository
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          SERVICE_NAME: ${{ steps.setup.outputs.service_name }}
        run: |
          docker tag $ECR_REGISTRY/nonprod/$SERVICE_NAME:$_BRANCH_NAME-$IMAGE_TAG \
            bitwarden/$SERVICE_NAME:$_RELEASE_VERSION
          docker tag $ECR_REGISTRY/nonprod/$SERVICE_NAME:$_BRANCH_NAME-$IMAGE_TAG \
            bitwarden/$SERVICE_NAME:latest

      - name: Push version and latest image
        env:
          DOCKER_CONTENT_TRUST: 1
          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ${{ steps.setup-dct.outputs.dct-delegate-repo-passphrase }}
          SERVICE_NAME: ${{ steps.setup.outputs.service_name }}
        run: |
          docker push bitwarden/$SERVICE_NAME:$_RELEASE_VERSION
          docker push bitwarden/$SERVICE_NAME:latest

      - name: List Docker images
        run: docker images

      - name: Log out of Docker
        run: docker logout


  release:
    name: Create GitHub Release
    runs-on: ubuntu-20.04
    needs:
      - setup
      - deploy
    steps:
      - name: Download latest Release docker-stub
        uses: bitwarden/gh-actions/download-artifacts@23433be15ed6fd046ce12b6889c5184a8d9c8783
        with:
          workflow: build.yml
          workflow_conclusion: success
          branch: ${{ needs.setup.outputs.branch-name }}
          artifacts: "docker-stub.zip,
                      swagger.json"

      - name: Create release
        uses: ncipollo/release-action@95215a3cb6e6a1908b3c44e00b4fdb15548b1e09
        with:
          artifacts: 'docker-stub.zip,
                      swagger.json'
          commit: ${{ github.sha }}
          tag: "v${{ needs.setup.outputs.release_version }}"
          name: "Version ${{ needs.setup.outputs.release_version }}"
          body: "<insert release notes here>"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
