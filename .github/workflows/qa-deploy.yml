name: QA Deploy

on:
  push:
    branches:
      - 'rc'
  workflow_dispatch:
    inputs: 
      migrateDb:
        required: true
        default: "true"
      resetDb:
        required: true
        default: "false"

jobs:
  build:
    #if: false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Api
            base_path: .
          - name: Admin
            base_path: .
            gulp: true
          - name: Billing
            base_path: .
          - name: Events
            base_path: .
          - name: Notifications
            base_path: .
          - name: Sso
            base_path: ./bitwarden_license
            gulp: true
          - name: Portal
            base_path: ./bitwarden_license
            gulp: true
          - name: Identity
            base_path: .
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Print Environment
        run: |
          dotnet --info
          node --version
          npm --version
          gulp --version

      - name: load env vars
        run: |
          echo "Base Path: ${BASE_PATH}"
          echo "Name: ${NAME}"
        env:
          BASE_PATH: ${{ matrix.base_path }}
          NAME: ${{ matrix.name }}

      - name: Build Service
        run: |
          work_dir=$(pwd)
          dir=$BASE_PATH/src/$SERVICE_NAME

          cd $dir
          echo "Restore"
          dotnet restore $SERVICE_NAME.csproj
          echo "Clean"
          dotnet clean $SERVICE_NAME.csproj -c "Release" -o obj/Azure/publish

          if [ "$GULP" == "true" ]; then
            npm install
            npm install gulp
            gulp --gulpfile gulpfile.js build
          fi

          echo "Publish"
          dotnet publish $SERVICE_NAME.csproj -c "Release" -o obj/Azure/publish

          cd obj/Azure/publish
          zip -r $SERVICE_NAME.zip .
          mv $SERVICE_NAME.zip ../../../
        env:
          SERVICE_NAME: ${{ matrix.name }}
          BASE_PATH: ${{ matrix.base_path }}
          GULP: ${{ matrix.gulp }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ env.SERVICE_NAME }}.zip
          path: ${{ env.BASE_PATH }}/src/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}.zip
        env:
          BASE_PATH: ${{ matrix.base_path }}
          SERVICE_NAME: ${{ matrix.name }}

      - name: Test build dir
        run: ls $BASE_PATH/src/$SERVICE_NAME
        env:
          SERVICE_NAME: ${{ matrix.name }}
          BASE_PATH: ${{ matrix.base_path }}


  reset-db:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Reset Test Data - Stub
        if: ${{ github.events.inputs.resetDb }} == "true"
        run: |
          echo "placeholder for cleaning DB"
          echo "placeholder for loading test dataset"

  update-db:
    if: ${{ github.events.inputs.migrateDb }} == "true"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: migrate db
        if: ${{ github.events.inputs.resetDb }} == "true"
        run: |
          echo "placeholder for updateing DB"


  deploy-identity:
    runs-on: ubuntu-latest
    needs: 
      - reset-db
      - update-db
    steps:
      - name: Download aritifacts
        uses: actions/download-artifact@v2
        with:
          name: Identity.zip

      - name: Login to Azure
        uses: Azure/login@77f1b2e3fb80c0e8645114159d17008b8a2e475a
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Retrieve secrets
        id: retrieve-secrets
        uses: Azure/get-keyvault-secrets@80ccd3fafe5662407cc2e55f202ee34bfff8c403
        with:
          keyvault: "bitwarden-qa-kv"
          secrets: "appservices-identity-webapp-name, 
                    appservices-identity-webapp-publish-profile"

      - name: Deploy Identity
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.retrieve-secrets.outputs.appservices-identity-webapp-name }} 
          slot-name: "staging"
          publish-profile: ${{ steps.retrieve-secrets.outputs.appservice-identity-webapp-publish-profile }} 
          package: ./Identity.zip


  deploy-api:
    runs-on: ubuntu-latest
    needs: 
      - reset-db
      - update-db
    steps:
      - name: Download aritifacts
        uses: actions/download-artifact@v2
        with:
          name: Api.zip

      - name: Retrieve Secrets
        uses: secrethub/actions/env-export@v0.2.1
        env:
          SECRETHUB_CREDENTIAL: ${{ secrets.SECRETHUB_CREDENTIAL }}
          API_WEBAPP_NAME: secrethub://bitwarden/devops/azure/dev/appservices/api_webapp_name
          API_WEBAPP_PUBLISH_PROFILE: secrethub://bitwarden/devops/azure/dev/appservices/api_webapp_publish_profile

      - name: Deploy Api 
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.API_WEBAPP_NAME }} 
          slot-name: "staging"
          publish-profile: ${{ env.API_WEBAPP_PUBLISH_PROFILE  }} 
          package: ./Api.zip

  deploy-billing:
    runs-on: ubuntu-latest
    needs: 
      - reset-db
      - update-db
    steps:
      - name: Download aritifacts
        uses: actions/download-artifact@v2
        with:
          name: Billing.zip

      - name: Retrieve Secrets
        uses: secrethub/actions/env-export@v0.2.1
        env:
          SECRETHUB_CREDENTIAL: ${{ secrets.SECRETHUB_CREDENTIAL }}
          BILLING_WEBAPP_NAME: secrethub://bitwarden/devops/azure/dev/appservices/billing_webapp_name
          BILLING_WEBAPP_PUBLISH_PROFILE: secrethub://bitwarden/devops/azure/dev/appservices/billing_webapp_publish_profile

      - name: Deploy Billing
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.BILLING_WEBAPP_NAME }} 
          slot-name: "staging"
          publish-profile: ${{ env.BILLING_WEBAPP_PUBLISH_PROFILE  }} 
          package: ./Billing.zip

  deploy-events:
    runs-on: ubuntu-latest
    needs: 
      - reset-db
      - update-db
    steps:
      - name: Download aritifacts
        uses: actions/download-artifact@v2
        with:
          name: Events.zip

      - name: Retrieve Secrets
        uses: secrethub/actions/env-export@v0.2.1
        env:
          SECRETHUB_CREDENTIAL: ${{ secrets.SECRETHUB_CREDENTIAL }}
          EVENTS_WEBAPP_NAME: secrethub://bitwarden/devops/azure/dev/appservices/events_webapp_name
          EVENTS_WEBAPP_PUBLISH_PROFILE: secrethub://bitwarden/devops/azure/dev/appservices/events_webapp_publish_profile

      - name: Deploy Events
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.EVENTS_WEBAPP_NAME }} 
          slot-name: "staging"
          publish-profile: ${{ env.EVENTS_WEBAPP_PUBLISH_PROFILE  }} 
          package: ./Events.zip

  deploy-sso:
    runs-on: ubuntu-latest
    needs: 
      - reset-db
      - update-db
    steps:
      - name: Download aritifacts
        uses: actions/download-artifact@v2
        with:
          name: Sso.zip

      - name: Retrieve Secrets
        uses: secrethub/actions/env-export@v0.2.1
        env:
          SECRETHUB_CREDENTIAL: ${{ secrets.SECRETHUB_CREDENTIAL }}
          SSO_WEBAPP_NAME: secrethub://bitwarden/devops/azure/dev/appservices/sso_webapp_name
          SSO_WEBAPP_PUBLISH_PROFILE: secrethub://bitwarden/devops/azure/dev/appservices/sso_webapp_publish_profile

      - name: Deploy Sso
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.SSO_WEBAPP_NAME }} 
          slot-name: "staging"
          publish-profile: ${{ env.SSO_WEBAPP_PUBLISH_PROFILE  }} 
          package: ./Sso.zip

  deploy-portal:
    runs-on: ubuntu-latest
    needs: 
      - reset-db
      - update-db
    steps:
      - name: Download aritifacts
        uses: actions/download-artifact@v2
        with:
          name: Portal.zip

      - name: Retrieve Secrets
        uses: secrethub/actions/env-export@v0.2.1
        env:
          SECRETHUB_CREDENTIAL: ${{ secrets.SECRETHUB_CREDENTIAL }}
          PORTAL_WEBAPP_NAME: secrethub://bitwarden/devops/azure/dev/appservices/portal_webapp_name
          PORTAL_WEBAPP_PUBLISH_PROFILE: secrethub://bitwarden/devops/azure/dev/appservices/portal_webapp_publish_profile

      - name: Deploy Portal
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.PORTAL_WEBAPP_NAME }} 
          slot-name: "staging"
          publish-profile: ${{ env.PORTAL_WEBAPP_PUBLISH_PROFILE  }} 
          package: ./Portal.zip

  deploy-admin:
    runs-on: ubuntu-latest
    needs: 
      - reset-db
      - update-db
    steps:
      - name: Download aritifacts
        uses: actions/download-artifact@v2
        with:
          name: Admin.zip

      - name: Retrieve Secrets
        uses: secrethub/actions/env-export@v0.2.1
        env:
          SECRETHUB_CREDENTIAL: ${{ secrets.SECRETHUB_CREDENTIAL }}
          ADMIN_WEBAPP_NAME: secrethub://bitwarden/devops/azure/dev/appservices/admin_webapp_name
          ADMIN_WEBAPP_PUBLISH_PROFILE: secrethub://bitwarden/devops/azure/dev/appservices/admin_webapp_publish_profile

      - name: Deploy Admin
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.ADMIN_WEBAPP_NAME }} 
          slot-name: "staging"
          publish-profile: ${{ env.ADMIN_WEBAPP_PUBLISH_PROFILE  }} 
          package: ./Admin.zip
