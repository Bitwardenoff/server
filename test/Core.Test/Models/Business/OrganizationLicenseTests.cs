using System.Text.Json;
using Bit.Core.Entities;
using Bit.Core.Enums;
using Bit.Core.Models.Business;
using Bit.Core.Services;
using Bit.Core.Settings;
using Bit.Core.Utilities;
using Bit.Test.Common.AutoFixture.Attributes;
using NSubstitute;
using Xunit;

namespace Bit.Core.Test.Models.Business;

public class OrganizationLicenseTests
{
    /// <summary>
    /// Verifies that when version 13 is loaded from disk using the current OrganizationLicense class,
    /// its hash does not change.
    /// This guards against the risk that properties added in later versions are accidentally included in the hash
    /// </summary>
    [Theory]
    [BitAutoData(
        OrganizationLicense.CURRENT_LICENSE_FILE_VERSION,   // This is 1 behind, so the last version
        OrganizationLicense.CURRENT_LICENSE_FILE_VERSION + 1)]                    // The current version
    public void OrganizationLicense_LoadFromDisk_HashDoesNotChange(int licenseVersion)
    {
        var license = OrganizationLicenseStaticVersions.GetVersion(licenseVersion);

        // Compare the hash loaded from the json to the hash generated by the current class
        Assert.Equal(Convert.FromBase64String(license.Hash), license.ComputeHash());
    }

    /// <summary>
    /// Verifies that when version 13 is loaded from disk using the current OrganizationLicense class,
    /// it matches the Organization it was generated for.
    /// This guards against the risk that properties added in later versions are accidentally included in the validation
    /// </summary>
    [Theory]
    [BitAutoData(
        OrganizationLicense.CURRENT_LICENSE_FILE_VERSION,   // This is 1 behind, so the last version
        OrganizationLicense.CURRENT_LICENSE_FILE_VERSION + 1)]                    // The current version
    public void OrganizationLicense_LoadedFromDisk_VerifyData_Passes(int licenseVersion)
    {
        var version13 = OrganizationLicenseStaticVersions.GetVersion(licenseVersion);
        var organization = CreateOrganization();
        var globalSettings = Substitute.For<IGlobalSettings>();
        globalSettings.Installation.Returns(new GlobalSettings.InstallationSettings() { Id = new Guid(OrganizationLicenseStaticVersions.InstallationId) });
        Assert.True(version13.VerifyData(organization, globalSettings));
    }

    /// <summary>
    /// Helper used to generate a new json string to be added in OrganizationLicenseStaticVersions
    /// Uncomment [Fact], run the test and copy the result value
    /// </summary>
    // [Fact]
    private void GenerateLicenseFileJsonString()
    {
        var organization = CreateOrganization();
        var licensingService = Substitute.For<ILicensingService>();
        var installationId = new Guid(OrganizationLicenseStaticVersions.InstallationId);

        var license = new OrganizationLicense(organization, null, installationId, licensingService);

        var result = JsonSerializer.Serialize(license, JsonHelpers.Indented).Replace("\"", "'");
        // Put a break here to copy and paste the value into StaticVersions
    }

    private Organization CreateOrganization()
    {
        // These values need to be stable for our test cases to work
        // Initialize everything with static, non-default values
        return new Organization
        {
            Id = new Guid("12300000-0000-0000-0000-000000000456"),
            Identifier = "myIdentifier",
            Name = "myOrg",
            BusinessName = "myBusinessName",
            BusinessAddress1 = "myBusinessAddress1",
            BusinessAddress2 = "myBusinessAddress2",
            BusinessAddress3 = "myBusinessAddress3",
            BusinessCountry = "myBusinessCountry",
            BusinessTaxNumber = "myBusinessTaxNumber",
            BillingEmail = "myBillingEmail",
            Plan = "myPlan",
            PlanType = PlanType.EnterpriseAnnually,
            Seats = 10,
            MaxCollections = 2,
            UsePolicies = true,
            UseSso = true,
            UseKeyConnector = true,
            UseScim = true,
            UseGroups = true,
            UseDirectory = true,
            UseEvents = true,
            UseTotp = true,
            Use2fa = true,
            UseApi = true,
            UseResetPassword = true,
            UseSecretsManager = true,
            SelfHost = true,
            UsersGetPremium = true,
            UseCustomPermissions = true,
            Storage = 100000,
            MaxStorageGb = 100,
            Gateway = GatewayType.Stripe,
            GatewayCustomerId = "myGatewayCustomerId",
            GatewaySubscriptionId = "myGatewaySubscriptionId",
            ReferenceData = "myReferenceData",
            Enabled = true,
            LicenseKey = "myLicenseKey",
            PublicKey = "myPublicKey",
            PrivateKey = "myPrivateKey",
            TwoFactorProviders = "myTwoFactorProviders",
            ExpirationDate = new DateTime(2024, 12, 24),
            CreationDate = new DateTime(2022, 10, 22),
            RevisionDate = new DateTime(2023, 11, 23),
            MaxAutoscaleSeats = 100,
            OwnersNotifiedOfAutoscaling = new DateTime(2020, 5, 10),
            Status = OrganizationStatusType.Created,
            UsePasswordManager = true,
            SmSeats = 5,
            SmServiceAccounts = 8,
            MaxAutoscaleSmSeats = 101,
            MaxAutoscaleSmServiceAccounts = 102,
            SecretsManagerBeta = true,
            LimitCollectionCreationDeletion = true
        };
    }
}
